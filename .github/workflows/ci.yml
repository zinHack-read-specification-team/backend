name: CI/CD Backend Pipeline

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: ghcr.io/${{ secrets.GHCR_USERNAME }}/zinhack-backend:latest

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  test:
    name: Local Compose Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Pull backend image
        run: docker pull $IMAGE_NAME

      - name: Set IMAGE_NAME in .env
        run: echo "IMAGE_NAME=$IMAGE_NAME" > .env

      - name: Compose up
        run: docker compose up -d

      - name: Wait for services
        run: sleep 5

      - name: Non-critical /ping test
        continue-on-error: true
        run: |
          echo "--- Testing http://zinhack_back:8080/api/v1/ping ---"
          docker run --rm --network backend_backend_network curlimages/curl:latest \
            curl -s -o response.txt -w "%{http_code}" http://zinhack_back:8080/api/v1/ping || echo "000"

          STATUS=$(cat response.txt | tail -c 3)
          echo "HTTP Status: $STATUS"

          echo "--- Backend Response ---"
          cat response.txt || true

          echo "--- Backend Logs ---"
          docker compose logs app || true

          if [ "$STATUS" != "200" ]; then
            echo "⚠️ Warning: Ping failed (status: $STATUS), continuing pipeline anyway."
          else
            echo "✅ Ping success (200)"
          fi

      - name: Compose down
        run: docker compose down

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Archive compose files
        run: tar -czf deploy.tar.gz docker-compose.yml .env || echo "no .env - continue"

      - name: Copy files and deploy
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~

          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<EOF
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            rm -rf ./deploy_tmp
            mkdir deploy_tmp && tar -xzf deploy.tar.gz -C deploy_tmp
            cd deploy_tmp

            docker compose down || true
            docker compose pull
            docker compose up -d

            sleep 3
            echo "--- Health Check ---"
            curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/ping || echo "000"
            echo "--- Logs ---"
            docker compose logs app

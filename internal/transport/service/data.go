package service

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/google/uuid"
	"github.com/jung-kurt/gofpdf"

	"backend/internal/models"
	"backend/internal/repository"
)

const (
	fontURL  = "https://github.com/google/fonts/raw/main/apache/roboto/Roboto-Regular.ttf" // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞
	fontPath = "fonts/arial.ttf"                                                           // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
)

type DataService struct {
	dataRepo *repository.DataRepository
}

func NewDataService(repo *repository.DataRepository) *DataService {
	return &DataService{dataRepo: repo}
}

func (s *DataService) GetUserByID(id uuid.UUID) (*models.User, error) {
	return s.dataRepo.GetUser(id.String())
}

// internal/service/data.go

func (s *DataService) GetGameStatsByCode(code string) ([]models.GameUser, error) {
	return s.dataRepo.GetGameUsersByCode(code)
}

// GenerateCertificate —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *DataService) GenerateCertificate(userID uuid.UUID) ([]byte, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
	err := downloadFontIfNotExists(fontURL, fontPath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := s.dataRepo.GetGameUserByID(userID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return nil, err
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ
	game, err := s.dataRepo.GetGameLinkByID(user.GameID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: %v", err)
		return nil, err
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF
	pdf := gofpdf.New("P", "mm", "A4", "")
	pdf.AddUTF8Font("Arial", "", fontPath)
	pdf.SetFont("Arial", "", 14)
	pdf.AddPage()

	// –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
	drawBorder(pdf)

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	pdf.SetFont("Arial", "", 24)
	pdf.SetY(40)
	pdf.CellFormat(190, 10, "–°–ï–†–¢–ò–§–ò–ö–ê–¢", "0", 0, "C", false, 0, "")

	pdf.Ln(20)

	// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	pdf.SetFont("Arial", "", 14)
	pdf.MultiCell(0, 10, fmt.Sprintf(`
–ù–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ

%s

–ø—Ä–æ—à—ë–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–∫ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ "%s"

–≤ —à–∫–æ–ª–µ ‚Ññ%s, –∫–ª–∞—Å—Å %s.

–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: %s
`,
		user.FullName,
		game.GameName,
		game.SchoolNum,
		game.Class,
		time.Now().Format("02.01.2006"),
	), "", "C", false)

	pdf.Ln(10)

	// –õ–∏–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
	pdf.SetY(230)
	pdf.Line(40, 230, 160, 230)
	pdf.SetXY(40, 235)
	pdf.Cell(120, 10, "–ü–æ–¥–ø–∏—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞")

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
	var buf bytes.Buffer
	err = pdf.Output(&buf)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: %v", err)
		return nil, err
	}

	return buf.Bytes(), nil
}

// drawBorder —Ä–∏—Å—É–µ—Ç —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
func drawBorder(pdf *gofpdf.Fpdf) {
	pdf.SetDrawColor(0, 0, 0) // –ß–µ—Ä–Ω–∞—è —Ä–∞–º–∫–∞
	pdf.SetLineWidth(1)
	pdf.Rect(5, 5, 200, 287, "D") // –í–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞
	pdf.SetLineWidth(0.5)
	pdf.Rect(10, 10, 190, 277, "D") // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞
}

// downloadFontIfNotExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞, –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
func downloadFontIfNotExists(url, filepath string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(filepath); err == nil {
		return nil // –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	}

	log.Println("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞...")
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	dir := filepath[:len(filepath)-len("arial.ttf")]
	if err := os.MkdirAll(dir, os.ModePerm); err != nil {
		return err
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	log.Println("‚úÖ –®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
	return nil
}
